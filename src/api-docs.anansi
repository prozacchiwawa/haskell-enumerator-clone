\onecolumn
\section{Haddock API documentation}

This section just repeats literate documentation in Haddock syntax.

:d Data.Enumerator module header
-----------------------------------------------------------------------------
-- |
-- Module: Data.Enumerator
-- Copyright: 2010 John Millikin
-- License: MIT
--
-- Maintainer: jmillikin@gmail.com
-- Portability: portable
--
-- An implementation of Oleg Kiselyov&#x2019;s left-fold enumerators
--
-----------------------------------------------------------------------------
:

:d apidoc Stream
-- | Not to be confused with types from the @Stream@ or
-- @stream-fusion@ packages, a 'Stream' is a sequence of chunks
-- generated by an 'Enumerator'. In contrast to Oleg&#x2019;s implementation,
-- this stream does not support error handling -- errors encountered
-- while generating a stream are reported in the 'Step' type instead.
--
-- @(Chunks [])@ is used to indicate that a stream is still active, but
-- currently has no available data. Iteratees should ignore empty chunks.
:

:d apidoc Step.Continue
-- | The 'Iteratee' is capable of accepting more input. Note that more input
-- is not necessarily required; the 'Iteratee' might be able to generate a
-- value immediately if it receives 'EOF'.
:

:d apidoc Step.Yield
-- | The 'Iteratee' has received enough input to generate a result.
-- Included in this value is left-over input, which can be passed to
-- composed 'Iteratee's.
:

:d apidoc Step.Error
-- | The 'Iteratee' encountered an error which prevents it from proceeding
-- further.
:

:d apidoc Iteratee
-- | The primary data type for this library, which consumes
-- input from a 'Stream' until it either generates a value or encounters
-- an error. Rather than requiring all input at once, an iteratee will
-- return 'Continue' when it is capable of processing more data.
--
-- In general, iteratees begin in the 'Continue' state. As each chunk is
-- passed to the continuation, the iteratee returns the next step:
-- 'Continue' for more data, 'Yield' when it's finished, or 'Error' to
-- abort processing.
:

:d apidoc Enumerator
-- | While 'Iteratee's consume data, enumerators generate it. Since
-- @'Iteratee'@ is an alias for @m ('Step' a m b)@, 'Enumerator's can
-- be considered step transformers of type
-- @'Step' a m b -> m ('Step' a m b)@.
--
-- 'Enumerator's typically read from an external source (parser, handle,
-- random generator, etc). They feed chunks into an 'Iteratee' until the
-- source runs out of data (triggering 'EOF') or the iteratee finishes
-- processing ('Yield's a value).
:

:d apidoc Enumeratee
-- | In cases where an enumerator acts as both a source and sink, the resulting
-- type is named an 'Enumeratee'. Enumeratees have two input types,
-- &#x201c;outer a&#x201d; (@aOut@) and &#x201c;inner a&#x201d; (@aIn@).
:

:d apidoc liftTrans
-- | Lift an 'Iteratee' onto a monad transformer, re-wrapping the
-- 'Iteratee'&#x2019;s inner monadic values.
:

:d apidoc returnI
:

:d apidoc yield
:

:d apidoc continue
:

:d apidoc throwError
:

:d apidoc liftI
:

:d apidoc (>>==)
-- | Equivalent to (>>=), but allows 'Iteratee's with different input types
-- to be composed.
:

:d apidoc (==<<)
-- | @(==\<\<) = flip (\>\>==)@
:

:d apidoc ($$)
-- | @($$) = (==\<\<)@
--
-- This might be easier to read when passing a chain of iteratees to an
-- enumerator.
:

:d apidoc (>==>)
-- | @(>==>) e1 e2 s = e1 s >>== e2@
:

:d apidoc (<==<)
-- | @(\<==\<) = flip (>==>)@
:

:d apidoc consume
-- | Consume all input until 'EOF', then return consumed input as a list.
:

:d apidoc isEOF
-- | Return 'True' if the next 'Stream' is 'EOF'.
:

:d apidoc foldl
-- | Lifts a pure left fold into an iteratee.
:

:d apidoc foldl'
-- | As 'foldl', but strict in its accumulator.
:

:d apidoc foldM
-- | Lifts a monadic left fold into an iteratee.
:

:d apidoc enumEOF
-- | The most primitive enumerator; simply sends 'EOF'. The iteratee must
-- either yield a value or throw an error continuing receiving 'EOF' will
-- not terminate with any useful value.
:

:d apidoc enumList
-- | Another small, useful enumerator separates an input list into chunks,
-- and sends them to the iteratee. This is useful for testing iteratees in pure
-- code.
:

:d apidoc concatEnums
-- | Compose a list of 'Enumerator's using '(>>==)'
:

:d apidoc joinI
-- | 'joinI' is used to &#x201C;flatten&#x201D; 'Enumeratee's into an
-- 'Iteratee'.
:

:d apidoc checkDoneEx
-- | A common pattern in 'Enumeratee' implementations is to check whether
-- the inner 'Iteratee' has finished, and if so, to return its output.
-- 'checkDone' passes its parameter a continuation if the 'Iteratee'
-- can still consume input, or yields otherwise.
:

:d apidoc checkDone
-- | @checkDone = checkDoneEx (Chunks [])@
--
-- Use this for enumeratees which do not have an input buffer.
:

API docs for these are still TODO

:d apidoc liftMap
:

:d apidoc map
-- | @map f = 'liftMap' ('Prelude.map' f)@
:

:d apidoc concatMap
-- | @concatMap f = 'liftMap' ('Prelude.concatMap' f)@
:

:d apidoc filter
-- | @filter p = 'liftMap' ('Prelude.filter' p)@
:

:d apidoc concatMapM
:

:d apidoc mapM
:

:d apidoc filterM
:

:d apidoc sequence
:

:d apidoc head
:

:d apidoc peek
:

:d apidoc last
:

:d apidoc length
:

:d apidoc drop
:

:d apidoc dropWhile
:

:d apidoc span
:

:d apidoc break
-- | @break p = 'span' (not . p)@
:

:d apidoc parser combinators
-- | Oleg&#x2019;s original @IterateeM.hs@ includes some basic iteratees
-- for parsing, so this section ports them to the new interface. However,
-- in practice most parsing will be performed with enumerator-based
-- interfaces to existing parser libraries (such as Parsec or Attoparsec).
:

:d apidoc run
-- | Run an iteratee until it finishes, and return either the final value
-- (if it succeeded) or the error (if it failed).
:

:d apidoc printChunks
-- | Print chunks as they're received from the enumerator, optionally
-- printing empty chunks.
:

:d Data.Enumerator.Binary module header
-----------------------------------------------------------------------------
-- |
-- Module: Data.Enumerator.Binary
-- Copyright: 2010 John Millikin
-- License: MIT
--
-- Maintainer: jmillikin@gmail.com
-- Portability: portable
--
-- Enumerator-based binary IO and processing
--
-----------------------------------------------------------------------------
:

:d apidoc enumHandle
-- | Read bytes (in chunks of the given buffer size) from the handle, and
-- stream them to an 'Iteratee'. If an exception occurs during file IO,
-- enumeration will stop and 'Error' will be returned. Exceptions from the
-- iteratee are not caught.
--
-- This enumerator blocks until at least one byte is available from the
-- handle, and might read less than the maximum buffer size in some
-- cases.
--
-- The handle should be opened with no encoding, and in 'IO.ReadMode' or
-- 'IO.ReadWriteMode'.
:

:d apidoc iterHandle
-- | Read bytes from a stream and write them to a handle. If an exception
-- occurs during file IO, enumeration will stop and 'Error' will be
-- returned.
--
-- The handle should be opened with no encoding, and in 'IO.WriteMode' or
-- 'IO.ReadWriteMode'.
:

:d apidoc enumFile
-- | Opens a file path in binary mode, and passes the handle to 'enumHandle'.
-- The file will be closed when the 'Iteratee' finishes.
:

:d Data.Enumerator.Text module header
-----------------------------------------------------------------------------
-- |
-- Module: Data.Enumerator.Text
-- Copyright: 2010 John Millikin
-- License: MIT
--
-- Maintainer: jmillikin@gmail.com
-- Portability: portable
--
-- Enumerator-based text IO
--
-----------------------------------------------------------------------------
:

:d apidoc enumHandle (text)
-- | Read lines of text from the handle, and stream them to an 'Iteratee'.
-- If an exception occurs during file IO, enumeration will stop and 'Error'
-- will be returned. Exceptions from the iteratee are not caught.
--
-- The handle should be opened with an appropriate text encoding, and
-- in 'IO.ReadMode' or 'IO.ReadWriteMode'.
:

:d apidoc iterHandle (text)
-- | Read text from a stream and write it to a handle. If an exception
-- occurs during file IO, enumeration will stop and 'Error' will be
-- returned.
--
-- The handle should be opened with an appropriate text encoding, and
-- in 'IO.WriteMode' or 'IO.ReadWriteMode'.
:

:d apidoc enumFile (text)
-- | Opens a file path in text mode, and passes the handle to 'enumHandle'.
-- The file will be closed when the 'Iteratee' finishes.
:

:d apidoc Codec
:

:d apidoc encode
:

:d apidoc decode
:

:d Data.Enumerator.IO module header
-----------------------------------------------------------------------------
-- |
-- Module: Data.Enumerator.IO
-- Copyright: 2010 John Millikin
-- License: MIT
--
-- Maintainer: jmillikin@gmail.com
-- Portability: portable
--
-- Deprecated: use 'Data.Enumerator.IO' instead
--
-----------------------------------------------------------------------------
:

